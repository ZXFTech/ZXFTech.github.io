// 给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

// '.' 匹配任意单个字符
// '*' 匹配零个或多个前面的那一个元素
// 所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

/**
 * 思路：
 * 因为匹配要涵盖整个字符串，所以设置两个指针，分别指向字符串s和字符规律p的起始字符si和pi均为0
 * 1.获取pi，如果不为*，则判断pi+1是否为*
 * 2.如果不为 * ，则判断是否为 . ,
 * 3.如果为 . ,则si+1
 * 4.如果不为 . ,则判断si和pi出的字符是否相同，相同则si++,pi++，返回步骤1
 * 5.不相同则结束，返回false
 * 6.如果为 *，
 * 7.判断si与pi处字符是否相同，
 * 8.如果不同，则pi+=2，跳过当前字符与跟随的*，返回步骤1，
 * 9.如果相同，则si++，返回步骤7
 * 10.如果不同，返回步骤8
 */

const isMatch = (s, p) => {
  // 排除长度为0情况
  if (!s || !p) return false;
  let si = 0, pi = 0;
  while (si < s.length && pi < p.length) {
    if (p[pi] !== '*' && p[pi + 1] !== '*') {
      if (p[pi] === '.') {
        si++;
        pi++;
        continue;
      } else if (p[pi] !== s[si]) {
        return false;
      } else {
        pi++;
        si++;
        continue;
      }
    } else {
      si++;
      while (si < s.length && s[si] === s[si - 1]) {
        si++
      }
      if (si === s.length)
    }
  }
}